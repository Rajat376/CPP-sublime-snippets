<snippet>
	<content><![CDATA[
class Node
{
public:
	int val;

};
class PST
{
public:
	PST*left;
	PST*right;
	Node node;

	template <typename M>
	void init(Node *root, int l, int r, M &num)
	{
		root->val = num;
	}
	template <typename M>
	PST* updateNode(PST*pst, int l, int r, M &num)
	{
		PST* newpst = new PST();
		init(&newpst->node, l, r, num);
		return newpst;
	}
	Node unite(Node a , Node b)
	{
		Node res;
		res.val = a.val + b.val;
		return res;
	}
	PST()
	{
		this->left = NULL;
		this->right = NULL;
	}
	template<typename M>
	void build(PST *pst, int l, int r, vector<M>&v)
	{
		if (l == r)
		{
			init(&pst->node, l, r, v[l]);
			return;
		}
		int m = ((l + r) >> 1);
		pst->left = new PST();
		pst->right = new PST();
		build(pst->left, l, m, v);
		build(pst->right, m + 1, r, v);
		pst->node = unite(pst->left->node, pst->right->node);
	}
	template<typename M>
	PST(vector<M>&v)
	{
		this->left = NULL;
		this->right = NULL;
		int N = v.size();
		build(this, 0, N - 1, v);

	}
	Node get(PST *pst, int l, int r, int L, int R)
	{
		int m = ((L + R) >> 1);
		if (L >= l && R <= r)
			return pst->node;
		else if (r <= m)
			return get(pst->left, l, r, L, m);
		else if (l > m)
			return get(pst->right, l, r, m + 1, R);
		else
			return unite(get(pst->left, l, r, L, m), get(pst->right, l, r, m + 1, R));
	}
	Node get(int l, int r, int N)
	{
		return get(this, l, r, 0, N - 1);
	}
	template<typename M>
	PST* update(PST *pst, int x, int L, int R, M &num)
	{
		if (L == R)
		{
			return updateNode(pst, L, R, num);
		}
		int m = ((L + R) >> 1);
		PST *newpst = new PST();
		newpst->left = pst->left;
		newpst->right = pst->right;
		if (x <= m)
			newpst->left = update(pst->left, x, L, m, num);
		else
			newpst->right = update(pst->right, x, m + 1, R, num);
		newpst->node = unite(newpst->left->node, newpst->right->node);
		return newpst;
	}
	template<typename M>
	PST *upd(int x, int N, M&num)
	{
		return update(this, x, 0, N - 1, num);
	}

};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>persistent segtree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
